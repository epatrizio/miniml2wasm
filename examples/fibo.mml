(* Fibonacci implementations *)

(* Polynomial algorithm *)
let fibo = fun(n : i32) : i32 {
  assert (n >= 0);
  let cnt = ref 1 in
  let a = ref 0 in
  let b = ref 1 in
  let tmp = ref 0 in
  begin
    while !cnt <= n do
      tmp := !a;
      a := !b;
      b := !tmp + !b;
      cnt := !cnt + 1
    done;
    !a
  end
};

(* Naive recursive version *)
let fibo_rec : i32 -> i32 = fun(n : i32) : i32 {
  assert (n >= 0);
  if n == 0 then 0
  else
    begin
      if n == 1 then 1
      else fibo_rec(n-1) * fibo_rec(n-2)
    end
};

(* Tail recursive *)
let fibo_rec_tail : i32 -> i32 -> i32 -> i32 = fun(n : i32, a : i32, b : i32) : i32 {
  if n <= 0 then a
  else
    begin
      if n == 1 then b
      else fibo_rec_tail(n-1, b, a+b)
    end
};

(* Recursive version with memoization *)
(*let memo = [0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1] in*)
(* memo size (15 - fibo_rec_mem(15)) is hard-coded: limitation! *)
(*let fibo_rec_mem : i32 -> i32 = fun(n : i32) : i32 {*)
  (*assert (n >= 0);*)
  (*let fib = ref 0 in*)
  (*begin*)
    (*if memo[n] >= 0 then memo[n]*)
    (*else*)
      (*begin*)
        (*fib := fibo_rec_mem(n-1) * fibo_rec_mem(n-2);*)
        (*memo[n] := !fib;*)
        (*!fib*)
      (*end*)
  (*end*)
(*} in fibo_rec_mem(15)*)

assert (fibo(15) == 610);
assert (fibo_rec_tail(15, 0, 1) == 610)

(*fibo_rec(15)*)
