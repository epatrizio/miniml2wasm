(* supported types: unit, bool, i32, ref, array, 2-dim matrix *)
(* type is optional, it can be inferred *)

(* global scope *)

let x = 40;
(* let arr : bool[2] = [true,true]; *)
(* array are not supported in a global context *)

(* function can be global and local *)
(* return type can be inferred, argument type not! *)
(*   > more details about typing in the following documentation *)
let identity (*: i32 -> i32*) = fun(x : i32) (*: i32*) {
  x
};

(* local scope *)

(* var is immutable by default *)
let y : i32 = 2 in
(* var should by mutable *)
let z : i32 ref = ref 0 in
(* user input *)
let r : i32 = read_i32 in
(* array construct *)
(* array must be initialized to set the fully type (elements type and size) *)
let array : bool[2] = [true,true] in
(* matrix construct *)
let matrix : i32[2][3] = [[0,0],[1,1],[2,2]] in
  begin  (* block *)
    (* primitive function: assert. If false-cond, a trap is emit *)
    assert true;
    while true do (* loop-cond must be in bool type *)
      (* mutable var assign *)
      (* primitive function: array_size *)
      z := array_size array;
      (* array col assign *)
      array[0] := false;
      (* if-cond must be in bool type *)
      (* imported function: print_i32 *)
      (* !z : dereference z var *)
      if not true then print_i32 !z
      else print_i32 -(!z)
    done;
    (* unary opertations: - not *)
    (* binary opertations: + - * / == != < <= > => *)
    (* function call *)
    identity(x + y)
  end
