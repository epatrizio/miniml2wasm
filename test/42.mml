(* supported types: unit, bool, i32, ref, array, 2-dim matrix *)
(* type is optional, it can be inferred *)

(* global scope *)

(* imported function: print_i32 *)
(* imported functions are only supported at the beginning of the global scope *)
let print_i32 : i32 -> unit = import fun(i32) : unit;

let x = 40;

(* let arr : bool[2] = [true,true]; *)
(* arrays are not supported in a global context *)

(* let li : bool list = true :: nil; *)
(* lists are not supported in a global context *)

(* function can be global and local *)
(* export - optional attribute - functions must be global *)
(* return type can be inferred, argument type not! *)
(*   > more details about typing in the following documentation *)
let identity (*: i32 -> i32*) = export fun(x : i32) (*: i32*) {
  x
};

(* local scope *)

(* var is immutable by default *)
let y : i32 = 2 in
(* var should by mutable *)
let z : i32 ref = ref 0 in
(* array construct: direct or with array_make primitive function *)
(* array must be initialized to set the fully type (elements type and size) *)
(* let array : bool[2] = array_make 2 true in *)
let array : bool[2] = [true,true] in
(* matrix construct: direct or with matrix_make primitive function *)
(* Warning: matrix_make x y default_val produces an i32[y][x] *)
(*          i32[y] must be seen as the array[x] first dim elements type *)
(*            (i32[y])[x] - elt_type[size] *)
(* let matrix : i32[2][3] = matrix_make 3 2 0 in *)
let matrix : i32[2][3] = [[0,0],[0,0],[0,0]] in
let li : i32 list = 42 :: 21 :: nil in
(* let li = nil in *)
(* nil: empty list, element types are unknown at this moment *)
(* let li = 42 :: li in *)
(* li type is inferred: i32 list *)
(* let li : i32 list = nil in *)
(* li type should be forced from the beginning *)
let li_hd = list_hd li in   (* head list: 42 *)
let li_tl = list_tl li in   (* tail list: 21 :: nil *)
  begin  (* block *)
    (* primitive function: assert. If false-cond, a trap is emit *)
    assert true;
    while true do (* loop-cond must be in bool type *)
      (* mutable var assign *)
      (* primitive function: array_size *)
      z := array_size array;
      (* array col assign *)
      array[0] := false;
      (* matrix field assign *)
      matrix[2][1] := 42;
      (* if-cond must be in bool type *)
      (* !z : dereference z var *)
      if not true then print_i32(!z)
      else print_i32(-(!z))
    done;
    (* unary opertations: - not *)
    (* binary opertations: + - * / == != < <= > => *)
    (* function call *)
    identity(x + y)
  end
